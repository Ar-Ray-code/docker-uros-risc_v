#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jan 23 10:07:48 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn make oldconfig
match_max 100000
expect -exact "toolchain/gdb/Config.in:63:warning: 'select' used by config symbol 'BR2_PACKAGE_GDB_TUI' refer to undefined symbol 'BR2_PACKAGE_NCURSES'\r
#\r
# using defaults found in .config\r
#\r
.config:100: trying to assign nonexistent symbol BR2_GCC_VERSION_4_7_3\r
*\r
* Buildroot Configuration\r
*\r
Target Architecture\r
  1. alpha (BR2_alpha)\r
> 2. arm (BR2_arm)\r
  3. armeb (BR2_armeb)\r
  4. avr (BR2_avr)\r
  5. avr32 (BR2_avr32)\r
  6. blackfin (BR2_bfin)\r
  7. cris (BR2_cris)\r
  8. i386 (BR2_i386)\r
  9. lm32 (BR2_lm32) (NEW)\r
  10. r8c/m16c/m32c (BR2_m32c)\r
  11. m68k (BR2_m68k)\r
  12. m68hc11 (BR2_m68hc11)\r
  13. m68hc12 (BR2_m68hc12)\r
  14. m9s12x (BR2_m9s12x)\r
  15. mips (BR2_mips)\r
  16. mipsel (BR2_mipsel)\r
  17. nios2 (BR2_nios2)\r
  18. powerpc (BR2_powerpc)\r
  19. superh (BR2_sh)\r
  20. superh64 (BR2_sh64)\r
  21. H8/300 (BR2_h8300)\r
  22. sparc (BR2_sparc)\r
  23. x86_64 (BR2_x86_64)\r
choice\[1-23?\]: "
send -- "\r"
expect -exact "\r
Target Architecture Variant\r
  1. generic ARM (BR2_generic_arm)\r
  2. ARM610 (BR2_arm610)\r
  3. ARM7TDMI (BR2_arm7tdmi)\r
  4. ARM710 (BR2_arm710)\r
  5. ARM720T (BR2_arm720t)\r
  6. ARM740T (BR2_arm740t)\r
  7. ARM920T (BR2_arm920t)\r
  8. ARM922T (BR2_arm922t)\r
  9. ARM926T (BR2_arm926t)\r
  10. ARM1136JF-S (BR2_arm1136jf_s)\r
  11. Cortex-A5 (BR2_cortex_a5)\r
  12. Cortex-A8 (BR2_cortex_a8)\r
  13. Cortex-R4 (BR2_cortex_r4) (NEW)\r
  14. Cortex-R4F (BR2_cortex_r4f) (NEW)\r
> 15. Cortex-M3/M4 (BR2_cortex_m3)\r
  16. Cortex-M4F (BR2_cortex_m4f)\r
  17. Cortex-M0 (BR2_cortex_m0)\r
  18. Cortex-M1 (BR2_cortex_m1) (NEW)\r
  19. SA110 (BR2_sa110)\r
  20. SA1100 (BR2_sa1100)\r
  21. X-Scale (BR2_xscale)\r
  22. iwmmxt (BR2_iwmmxt)\r
choice\[1-22?\]: "
send -- "\r"
expect -exact "\r
Target ABI\r
  1. OABI (BR2_ARM_OABI)\r
> 2. EABI (BR2_ARM_EABI)\r
choice\[1-2?\]: 2\r
*\r
* Build options\r
*\r
Wget command (BR2_WGET) \[wget --passive-ftp\] wget --passive-ftp\r
Subversion (svn) checkout command (BR2_SVN) \[svn co\] svn co\r
zcat command (BR2_ZCAT) \[zcat\] zcat\r
bzcat command (BR2_BZCAT) \[bzcat\] bzcat\r
Tar options (BR2_TAR_OPTIONS) \[\] \r
Download dir (BR2_DL_DIR) \[\$(BASE_DIR)/../archives\] \$(BASE_DIR)/../archives\r
Toolchain and header file location? (BR2_STAGING_DIR) \[\$(BUILD_DIR)/staging_dir\] \$(BUILD_DIR)/staging_dir\r
Path to the NuttX root directory (BR2_NUTTX_DIR) \[\$(TOPDIR)/../../nuttx\] \$(TOPDIR)/../../nuttx\r
Custom build dir prefix (BR2_TOPDIR_PREFIX) \[\] \r
Custom build dir suffix (BR2_TOPDIR_SUFFIX) \[\] \r
GNU build hostname suffix (BR2_GNU_BUILD_SUFFIX) \[pc-elf\] pc-elf\r
GNU target suffix (BR2_GNU_TARGET_SUFFIX) \[nuttx-eabi\] nuttx-eabi\r
prefer IMA compiles (BR2_PREFER_IMA) \[N/y/?\] n\r
*\r
* Toolchain Options\r
*\r
*\r
* Binutils Options\r
*\r
Build binutils (BR2_PACKAGE_BINUTILS) \[Y/?\] y\r
  Binutils Version\r
    1. binutils 2.19.1 (BR2_BINUTILS_VERSION_2_19_1)\r
    2. binutils 2.21.1 (BR2_BINUTILS_VERSION_2_21_1)\r
    3. binutils 2.22 (BR2_BINUTILS_VERSION_2_22)\r
  > 4. binutils 2.24 (BR2_BINUTILS_VERSION_2_24)\r
    5. binutils 2.26.1 (BR2_BINUTILS_VERSION_2_26_1) (NEW)\r
    6. binutils 2.28.1 (BR2_BINUTILS_VERSION_2_28_1) (NEW)\r
  choice\[1-6?\]: "
send -- "\r"
expect -exact "\r
  Additional binutils options (BR2_EXTRA_BINUTILS_CONFIG_OPTIONS) \[\] \r
*\r
* GCC Options\r
*\r
Build GCC cross-compiler (BR2_PACKAGE_GCC) \[Y/n/?\] y\r
  GCC compiler Version\r
    1. gcc 4.3.3 (BR2_GCC_VERSION_4_3_3)\r
    2. gcc 4.5.2 (BR2_GCC_VERSION_4_5_2)\r
    3. gcc 4.6.3 (BR2_GCC_VERSION_4_6_3)\r
    4. gcc 4.7.4 (BR2_GCC_VERSION_4_7_4) (NEW)\r
  > 5. gcc 4.8.5 (BR2_GCC_VERSION_4_8_5)\r
    6. gcc 4.9.4 (BR2_GCC_VERSION_4_9_4) (NEW)\r
    7. gcc 5.5.0 (BR2_GCC_VERSION_5_5_0) (NEW)\r
    8. gcc 6.4.0 (BR2_GCC_VERSION_6_4_0) (NEW)\r
    9. gcc 7.2.0 (BR2_GCC_VERSION_7_2_0) (NEW)\r
  choice\[1-9?\]: "
send -- "\r"
expect eof
